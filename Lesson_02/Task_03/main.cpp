/*
По моему мнению для игры в блэкджек понадобится базовый класс: Игра.
У Игры будут protected свойства:
    1) количество карт (колод);
	2) количество игроков в текущей раздаче;
	3) номер партии (например, для лога);
	4) победитель: казино или игрок (например, для лога);
	5) состояние игры: "делаются ставки", "игра в процессе", "поиск игроков", "поиск крупье";
public свойство:
    1) номер столика;
public методы:
    1) показать все карты у Игроков и Крупье (возможно у Крупье покажется только одна из двух карт, такое допустимо по некоторым правилам (смотрел Википедию));
	2) показать все ставки;
	3) вывести номер партии, количество игроков, победитель (если есть) и какую-нибудь еще полезную информацию, пока не придумал, что еще может понадобится;
	4) запросить ход у Игрока/Крупье;
	5) поздравить победителя;
	6) начать игру;
Еще один базовый класс - Человек.
У Человека будут protected свойства:
    1) имя;
	2) банк, которым он располагает;
	3) количество очков в текущей игре;
	4) какие карты в руке (массив карт);
	5) перебор или нет;
	6) количество побед, поражений, ничьих за историю игры (с момента запуска игры);
public методы:
	1) добавить очки согласно выпавшей карте;
	2) показать свои очки;
	3) показать свою ставку в текущей игре;
	4) показать свои карты;
	5) сделать ход (ставку, "еще", "достаточно");
	6) рассказать о себе (связано со свойством номер 1, 2, 6 или еще какая-нибудь дополнительная информация);
От Человека и от Игры будет public наследоваться класс Крупье
У Крупье будут следующие public методы:
	1) можно перегрузить функцию показа очков и/или карт для того, чтобы скрыть одну из карт ото всех;
	2) раздать карты;
	3) перемешать карты;
	4) уточнить количество колод (сделать недоступным, в процессе игры);
	5) принять или отклонить запрос Игрока
	6) перегрузить метод "сделать ход" (согласно правилам Крупье не может брать карты, если его рука уже больше или равна 17 очкам)
От Человека будет public наследоваться класс Игрок
У Игрока будут public методы:
	1) запросить изменение количества колод (запрос может быть отклонен Крупье);
	2) запросить перемешку карт (запрос может быть отклонен Крупье);
	3) перегрузить метод "сделать ход"


Вижу это как-то так, возможно в процессе кодинга, проектирования или планирования придут еще какие-то идеи -> будем обновлять =)
*/

#include <iostream>

int main()
{

	return 0;
}