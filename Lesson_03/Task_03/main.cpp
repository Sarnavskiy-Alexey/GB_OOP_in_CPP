/*
3.  Создать класс: Fraction (дробь). Дробь имеет числитель и знаменатель (например,
    3/7 или 9/2). Предусмотреть, чтобы знаменатель не был равен 0. Перегрузить:

1) математические бинарные операторы (+, -, *, /) для выполнения действий с дробями
2) унарный оператор (-)
3) логические операторы сравнения двух дробей (==, !=, <, >, <=, >=).

Примечание: Поскольку операторы < и >=, > и <= — это логические противоположности,
попробуйте перегрузить один через другой.

Продемонстрировать использование перегруженных операторов.
*/

#include <iostream>
#include "Fraction.h"

int main()
{
    setlocale(LC_ALL, "Russian");

    Fraction a;
    Fraction b(4, 3);
    a.setFraction(1, 5);
    Fraction a1(3, 4);
    Fraction b1(6, 8);

    std::cout << "\n\tЗадача 1: перегрузка арифметических операторов.\n";
    Fraction c = a * b;
    std::cout << "Перегрузка оператора умножения:\n";
    c.printFraction();
    Fraction d = a + b;
    std::cout << "Перегрузка оператора сложения:\n";
    d.printFraction();
    Fraction f = a - b;
    std::cout << "Перегрузка оператора разности:\n";
    f.printFraction();
    Fraction e = a / b;
    std::cout << "Перегрузка оператора деления:\n";
    e.printFraction();

    std::cout << "\n\tЗадача 2: перегрузка унарного оператора.\n";
    Fraction g = -a;
    std::cout << "Перегрузка унарного оператора \"-\":\n";
    g.printFraction();

    std::cout << "\n\tЗадача 3: перегрузка бинарных логических операторов.\n";
    std::cout << "Перегрузка оператора сравнения \"равно\": ";
    std::cout << std::boolalpha << (a1 == b1);
    std::cout << "\nПерегрузка оператора сравнения \"не равно\": ";
    std::cout << (a1 != b1);
    std::cout << "\nПерегрузка оператора сравнения \"меньше\": ";
    std::cout << (a1 < b1);
    std::cout << "\nПерегрузка оператора сравнения \"больше либо равно\": ";
    std::cout << (a1 >= b1);
    std::cout << "\nПерегрузка оператора сравнения \"больше\": ";
    std::cout << (a1 > b1);
    std::cout << "\nПерегрузка оператора сравнения \"меньше либо равно\": ";
    std::cout << (a1 <= b1);

    return 0;
}